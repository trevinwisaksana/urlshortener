// Code generated by MockGen. DO NOT EDIT.
// Source: repository/urlshortener/postgresql/postgresql.go

// Package mockurlshortener is a generated GoMock package.
package mockurlshortener

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	model "github.com/trevinwisaksana/trevin-urlshortener/model"
)

// MockPostgreSQL is a mock of PostgreSQL interface.
type MockPostgreSQL struct {
	ctrl     *gomock.Controller
	recorder *MockPostgreSQLMockRecorder
}

// MockPostgreSQLMockRecorder is the mock recorder for MockPostgreSQL.
type MockPostgreSQLMockRecorder struct {
	mock *MockPostgreSQL
}

// NewMockPostgreSQL creates a new mock instance.
func NewMockPostgreSQL(ctrl *gomock.Controller) *MockPostgreSQL {
	mock := &MockPostgreSQL{ctrl: ctrl}
	mock.recorder = &MockPostgreSQLMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPostgreSQL) EXPECT() *MockPostgreSQLMockRecorder {
	return m.recorder
}

// CreateShortUrl mocks base method.
func (m *MockPostgreSQL) CreateShortUrl(ctx context.Context, username, longUrl, randomID string) (model.Url, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateShortUrl", ctx, username, longUrl, randomID)
	ret0, _ := ret[0].(model.Url)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateShortUrl indicates an expected call of CreateShortUrl.
func (mr *MockPostgreSQLMockRecorder) CreateShortUrl(ctx, username, longUrl, randomID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateShortUrl", reflect.TypeOf((*MockPostgreSQL)(nil).CreateShortUrl), ctx, username, longUrl, randomID)
}

// CreateUser mocks base method.
func (m *MockPostgreSQL) CreateUser(ctx context.Context, username, hashedPassword, fullName, email string) (model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, username, hashedPassword, fullName, email)
	ret0, _ := ret[0].(model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockPostgreSQLMockRecorder) CreateUser(ctx, username, hashedPassword, fullName, email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockPostgreSQL)(nil).CreateUser), ctx, username, hashedPassword, fullName, email)
}

// GetURL mocks base method.
func (m *MockPostgreSQL) GetURL(ctx context.Context, currentShortlink string) (model.Url, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetURL", ctx, currentShortlink)
	ret0, _ := ret[0].(model.Url)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetURL indicates an expected call of GetURL.
func (mr *MockPostgreSQLMockRecorder) GetURL(ctx, currentShortlink interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetURL", reflect.TypeOf((*MockPostgreSQL)(nil).GetURL), ctx, currentShortlink)
}

// GetUser mocks base method.
func (m *MockPostgreSQL) GetUser(ctx context.Context, username string) (model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", ctx, username)
	ret0, _ := ret[0].(model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockPostgreSQLMockRecorder) GetUser(ctx, username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockPostgreSQL)(nil).GetUser), ctx, username)
}

// UpdateShortURL mocks base method.
func (m *MockPostgreSQL) UpdateShortURL(ctx context.Context, currentShortlink, newShortlink string) (model.Url, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateShortURL", ctx, currentShortlink, newShortlink)
	ret0, _ := ret[0].(model.Url)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateShortURL indicates an expected call of UpdateShortURL.
func (mr *MockPostgreSQLMockRecorder) UpdateShortURL(ctx, currentShortlink, newShortlink interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateShortURL", reflect.TypeOf((*MockPostgreSQL)(nil).UpdateShortURL), ctx, currentShortlink, newShortlink)
}
